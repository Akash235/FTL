version: 2

.job_template: &job_template
  docker:
    - image: "japaric/$TARGET:v0.1.14"
  steps:
    - checkout
    - restore_cache:
        keys:
          # Find a cache corresponding to this specific Cargo.toml checksum and target.
          # When the target is different, this key will fail
          - cargo-{{ .Branch }}-{{ checksum "Cargo.toml" }}-{{ .Environment.CIRCLE_JOB }}
          # Find a cache corresponding to this specific Cargo.toml checksum.
          # When this file is changed, this key will fail.
          - cargo-{{ .Branch }}-{{ checksum "Cargo.toml" }}
          # Find a cache corresponding to any build in this branch, regardless of Cargo.toml checksum.
          # The most recent one will be used.
          - cargo-{{ .Branch }}
          # Find the most recent cache used from any branch
          - cargo
    - run:
        name: "Setup Rust"
        command: |
          apt-get update
          apt-get install -y --no-install-recommends curl
          curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain nightly-2018-01-02
          export PATH=$HOME/.cargo/bin:$PATH
          echo 'export PATH=$HOME/.cargo/bin:$PATH' >> $BASH_ENV
          [[ $SKIP_ADDING_TARGET ]] || rustup target add $TARGET
    - run:
        name: "Build"
        command: |
          time cargo build --release --target $TARGET -v
          cp target/$TARGET/release/pihole_api ${BIN_NAME}
    - run:
        name: "Upload"
        command: |
          sha1sum ${BIN_NAME} > ${BIN_NAME}.sha1
          cat ${BIN_NAME}.sha1
          curl https://ftl.pi-hole.net:8080/FTL-client -o FTL-client
          chmod +x ./FTL-client
          [[ "$CIRCLE_PR_NUMBER" == "" ]] && ./FTL-client "${CIRCLE_BRANCH}" "${BIN_NAME}" "${FTL_SECRET}"
          [[ "$CIRCLE_PR_NUMBER" == "" ]] && ./FTL-client "${CIRCLE_BRANCH}" "${BIN_NAME}.sha1" "${FTL_SECRET}"
          rm ./FTL-client
    - save_cache:
        key: cargo-{{ .Branch }}-{{ checksum "Cargo.toml" }}-{{ .Environment.CIRCLE_JOB }}-{{ checksum "Cargo.lock" }}
        paths:
          - target
          - /root/.cargo
          - /root/.rustup

jobs:
  arm:
    <<: *job_template
    environment:
      BIN_NAME: "pihole-API-arm-linux-gnueabi"
      TARGET: "arm-unknown-linux-gnueabi"

  armhf:
    <<: *job_template
    environment:
      BIN_NAME: "pihole-API-armv7-linux-gnueabihf"
      TARGET: "armv7-unknown-linux-gnueabihf"

  aarch64:
    <<: *job_template
    environment:
      BIN_NAME: "pihole-API-aarch64-linux-gnu"
      TARGET: "aarch64-unknown-linux-gnu"

  x86_64:
    <<: *job_template
    environment:
      BIN_NAME: "pihole-API-linux-x86_64"
      TARGET: "x86_64-unknown-linux-gnu"
      SKIP_ADDING_TARGET: "1" # We're already running on x86_64

  x86_64-musl:
    <<: *job_template
    environment:
      BIN_NAME: "pihole-API-musl-linux-x86_64"
      TARGET: "x86_64-unknown-linux-musl"

  x86_32:
    <<: *job_template
    environment:
      BIN_NAME: "pihole-API-linux-x86_32"
      TARGET: "i686-unknown-linux-gnu"

workflows:
  version: 2
  build:
    jobs:
      - arm
      - armhf
      - aarch64
      - x86_64
      - x86_64-musl
      - x86_32
